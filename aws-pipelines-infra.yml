trigger:
  branches:
    include:
      - main

variables:
  TF_VAR_region: "us-east-1"
  TF_VAR_s3_bucket: "nombre-del-s3-bucket"
  TF_VAR_s3_key: "iac/terraform.tfstate"
  TF_VAR_s3_dynamodb_table: "terraform-lock"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Terraform_Deploy
    displayName: "Despliegue en AWS"
    condition: or(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranchName'], 'main'))

    jobs:
      - job: TerraformJob
        displayName: "Inicializar y aplicar Terraform"
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            name: TerraformInit
            displayName: "üå± Inicializaci√≥n Terraform"
            inputs:
              provider: "aws"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/iac"
              backendServiceAWS: "aws-terraform-prueba-eks"

          - task: TerraformTaskV4@4
            name: TerraformPlan
            displayName: "üîç Planificaci√≥n Terraform"
            inputs:
              provider: "aws"
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/iac"
              environmentServiceNameAWS: "aws-terraform-prueba-eks"
            continueOnError: true

          - task: TerraformTaskV4@4
            name: TerraformApply
            displayName: "üöÄ Aplicar Terraform"
            condition: succeeded()
            inputs:
              provider: "aws"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/iac"
              environmentServiceNameAWS: "aws-terraform-prueba-eks"
